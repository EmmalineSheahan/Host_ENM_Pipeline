# script to pull occurrences records down from databases, clean records, and thin records
library(rgbif)
# read in host pathogen range csv
workd <- getwd()
workd
library(dplyr)
library(dismo)
library(CoordinateCleaner)
worknew <- gsub('/Host_ENM_Pipeline', '', workd)
worknew
paste0(worknew, '/Wheat pathogen host range.csv')
host_data <- read.csv(paste0(worknew, '/Wheat pathogen host range.csv'))
head(host_data)
# get unique list of host species
host_list <- unique(host_data$Hosts)
host_list
?grep
grep(' ', host_list)
host_list <- host_list[two_names]
two_names <- grep(' ', host_list)
host_list <- host_list[two_names]
remove_sp <- grep('sp.', host_list)
host_list[remove_sp]
remove_sp <- grep(' sp.', host_list)
host_list[remove_sp]
remove_sp <- grep(' sp.', host_list, fixed = T)
host_list[remove_sp]
host_list <- host_list[-remove_sp]
host_list
remove_var <- grep(' var. ', hosst_list, fixed = T)
remove_var <- grep(' var. ', host_list, fixed = T)
host_list <- host_list[-remove_var]
host_list
rem_mis <- grep('.', host_list)
rem_mis
rem_mis <- grep('.', host_list, fixed = T)
rem_mis
host_list[rem_mis]
host_list <- host_list[-rem_mis]
host_list
?occ_data
i <- 1
host_list[i]
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T,
hasGeospatialIssue = F, coordinateUncertaintyInMeters = 10000)
gbif_data
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T)
gbif_data
class(gbif_data)
length(gbif_data)
i <- 2
host_list[i]
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T, limit = 100,000)
gbif_data
# retrieving GBIF data
gbif_data <- occ_data(verbatimScientificName = host_list[i], hasCoordinate = T,
limit = 100,000, coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
gbif_data
# script to pull occurrences records down from databases, clean records, and thin records
library(rgbif)
library(dplyr)
library(dismo)
library(CoordinateCleaner)
# read in host pathogen range csv
workd <- getwd()
worknew <- gsub('/Host_ENM_Pipeline', '', workd)
host_data <- read.csv(paste0(worknew, '/Wheat pathogen host range.csv'))
host_list <- unique(host_data$Hosts)
two_names <- grep(' ', host_list)
host_list <- host_list[two_names]
remove_sp <- grep(' sp.', host_list, fixed = T)
host_list <- host_list[-remove_sp]
host_list <- unique(host_data$Hosts)
host_list <- unique(host_data$Hosts)
two_names <- grep(' ', host_list)
host_list <- host_list[two_names]
remove_sp <- grep(' sp.', host_list, fixed = T)
host_list <- host_list[-remove_sp]
host_list <- unique(host_list)
i <- 1
host_list[i]
# retrieving GBIF data
gbif_data <- occ_data(verbatimScientificName = host_list[i], hasCoordinate = T,
limit = 100,000, coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
gbif_data
gbif_data$data
is.null(gbif_data$data)
# for loop to pull down, clean, and thin occurrences for each species
null_list <- vector(length = length(host_list))
# for loop to pull down, clean, and thin occurrences for each species
null_list <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_data(verbatimScientificName = host_list[i], hasCoordinate = T,
limit = 100,000, coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
null_list[i] <- is.null(gbif_data)
}
# for loop to pull down, clean, and thin occurrences for each species
null_list <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_data(verbatimScientificName = host_list[i], hasCoordinate = T,
limit = 100,000, coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
null_list[i] <- is.null(gbif_data$data)
}
length(which(null_list == T))
unique(null_list)
# for loop to pull down, clean, and thin occurrences for each species
null_list <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T,
limit = 100,000, coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
null_list[i] <- is.null(gbif_data$data)
}
# script to pull occurrences records down from databases, clean records, and thin records
library(rgbif)
library(ridigbio)
library(dplyr)
library(dismo)
library(CoordinateCleaner)
# read in host pathogen range csv
workd <- getwd()
worknew <- gsub('/Host_ENM_Pipeline', '', workd)
host_data <- read.csv(paste0(worknew, '/Wheat pathogen host range.csv'))
# get unique list of host species
host_list <- unique(host_data$Hosts)
two_names <- grep(' ', host_list)
host_list <- host_list[two_names]
remove_sp <- grep(' sp.', host_list, fixed = T)
host_list <- host_list[-remove_sp]
host_list <- unique(host_list)
?occ_search
i <- 5
host_list
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
limit = 100,000, coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
gbif_data
i <- 1
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
gbif_data
gbif_data == 0
i <- 5
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
# for loop to pull down, clean, and thin occurrences for each species
count_list <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = 10000,
hasGeospatialIssue = F)
count_list[i] <- gbif_data
}
count_list
length(which(count_list == 0))
length(which(count_list < 7))
host_list
count_list[947]
i <- 947
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = 10000)
gbif_data
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T)
gbif_data
# for loop to pull down, clean, and thin occurrences for each species
count_list <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = 10000)
count_list[i] <- gbif_data
}
count_list
length(which(count_list == 0))
# for loop to pull down, clean, and thin occurrences for each species
count_list <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000')
count_list[i] <- gbif_data
}
length(which(count_list == 0))
i <- 947
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000')
gbif_data
gbif_data$data
colnames(gbif_data$data)
gbif_data <- gbif_data$data %>% select(scientificName, decimalLatitude, decimalLongitude,
continent, stateProvince, year, month, day, eventDate,
geodeticDatum)
gbif_data <- data.frame(gbif_data$data)
gbif_data
gbif_data <- gbif_data %>% select(scientificName, decimalLatitude, decimalLongitude,
continent, stateProvince, year, month, day, eventDate,
geodeticDatum)
gbif_data <- gbif_data %>% dplyr::select(scientificName, decimalLatitude, decimalLongitude,
continent, stateProvince, year, month, day, eventDate,
geodeticDatum)
gbif_data
?idig_search_records
i <- 5
# script to pull occurrences records down from databases, clean records, and thin records
library(rgbif)
library(ridigbio)
library(dplyr)
library(dismo)
library(CoordinateCleaner)
# read in host pathogen range csv
workd <- getwd()
worknew <- gsub('/Host_ENM_Pipeline', '', workd)
host_data <- read.csv(paste0(worknew, '/Wheat pathogen host range.csv'))
# get unique list of host species
host_list <- unique(host_data$Hosts)
two_names <- grep(' ', host_list)
host_list <- host_list[two_names]
remove_sp <- grep(' sp.', host_list, fixed = T)
host_list <- host_list[-remove_sp]
host_list <- unique(host_list)
i <- 1
# retrieving idigbio data
idigbio_data <- idig_search_records(rq = list("scientificname" = host_list[i]),
fields = "all")
idigbio_data
i <- 5
# retrieving idigbio data
idigbio_data <- idig_search_records(rq = list("scientificname" = host_list[i]))
idigbio_data
colnames(idigbio_data)
idigbio_data$geopoint.lat
# retrieving idigbio data
idigbio_data <- idig_search_records(rq = list("scientificname" = host_list[i],
"geopoint" = list("type" = "exists")))
idigbio_data
idigbio_data$geopoint.lat
colnames(idigbio_data)
idigbio_data <- idigbio_data %>% dplyr::select(scientificname, geopoint.lat, geopoint.lon,
country, stateprovince, datecollected)
idigbio_data
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000', limit = 100000)
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000', limit = 50)
gbif_data <- data.frame(gbif_data$data)
gbif_data <- gbif_data %>% dplyr::select(scientificName, decimalLatitude, decimalLongitude,
country, stateProvince, year, month, day, eventDate,
geodeticDatum)
gbif_data$eventDate
idigbio_data$datecollected
gbif_data$geodeticDatum
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000', limit = 50)
}
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000', limit = 100000)
}
which(gbif_data == max(gbif_data))
gbif_data
# for loop to pull down, clean, and thin occurrences for each species
gbif_data <- vector(length = length(host_list))
gbif_data <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data[i] <- occ_data(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000', limit = 100000)
}
gbif_data <- vector(length = length(host_list))
for (i in seq_along(host_list)) {
# retrieving GBIF data
gbif_data[i] <- occ_count(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000', limit = 100000)
}
i <- 5
# retrieving GBIF data
gbif_data <- occ_data(scientificName = host_list[i], hasCoordinate = T,
coordinateUncertaintyInMeters = '0,10000', limit = 1000)
idigbio_data
# retrieving idigbio data
idigbio_data <- idig_search_records(rq = list("scientificname" = host_list[i],
"geopoint" = list("type" = "exists")),
fields = "all")
colnames(idigbio_data)
gbif_data <- data.frame(gbif_data$data)
gbif_data <- gbif_data %>% dplyr::select(scientificName, decimalLatitude, decimalLongitude,
country, stateProvince, eventDate,
geodeticDatum)
gbif_data$geodeticDatum
idigbio_data$coordinateuncertainty
which(idigbio_data$coordinateuncertainty > 10000)
# removing points with too high a coordinate uncertainty
remove_rows <- which(idigbio_data$coordinateuncertainty > 10000)
idigbio_data <- idigbio_data[-remove_rows,]
idigbio_data <- idigbio_data[,1:6]
idigbio_data
# retrieving idigbio data
idigbio_data <- idig_search_records(rq = list("scientificname" = host_list[i],
"geopoint" = list("type" = "exists")),
fields = "all")
idigbio_data <- idigbio_data %>% dplyr::select(scientificname, geopoint.lat, geopoint.lon,
country, stateprovince, datecollected,
coordinateuncertainty)
# removing points with too high a coordinate uncertainty
remove_rows <- which(idigbio_data$coordinateuncertainty > 10000)
idigbio_data <- idigbio_data[-remove_rows,]
idigbio_data <- idigbio_data[,1:6]
idigbio_data
colnames(idigbio_data) <- colnames(gbif_data)
length(colnames(idigbio_data))
length(colnames(gbif_data))
gbif_data
gbif_data <- gbif_data %>% dplyr::select(scientificName, decimalLatitude, decimalLongitude,
country, stateProvince, eventDate)
colnames(idigbio_data) <- colnames(gbif_data)
library(stringr)
?str_remove
gsub('T*', '', gbif_data$eventDate)
gbif_data$eventDate
gsub("T*", '', gbif_data$eventDate)
library(stringr)
?str_split
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
gsub("T.*", '', gbif_data$eventDate)
# adjusting eventDate to match format with idigbio
gbif_data$eventDate <- gsub("T.*", '', gbif_data$eventDate)
# adjusting eventDate to match gbif
idigbio_data$eventDate <- gsub("T.*", '', idigbio_data$eventDate)
idigbio_data$eventDate
?merge
# merging data
all_data <- merge(gbif_data, idigbio_data, all.x = T, all.y = T)
all_data
which(all_data$decimalLatitude < -180 ||
all_data$decimalLatitude > 180 ||
all_data$decimalLongitude < -90 ||
all_data$decimalLongitude > 90)
which(all_data$decimalLatitude < -180)
rem1 <- which(all_data$decimalLatitude < -90)
rem2 <- which(all_data$decimalLatitude > 90)
rem3 <- which(all_data$decimalLongitude < -180)
rem4 <- which(all_data$decimalLongitude > 180)
rem1
rem2
rem3
rem4
rem_rows <- c(rem1, rem2, rem3, rem4)
rem_rows
is.null(rem_rows)
!(is.null(rem_rows))
length(rem_rows)
length(rem_rows) > 0
# removing duplicate records
temp_data <- all_data %>% dplyr::select(decimalLatitude, decimalLongitude, eventDate)
temp_data
which(duplicated(temp_data))
rem_dups <- which(duplicated(temp_data))
if(length(rem_dups) > 0) {
all_data <- all_data[-rem_dups,]
}
?cc_sea
# script to pull occurrences records down from databases, clean records, and thin records
library(rgbif)
library(ridigbio)
library(dplyr)
library(dismo)
library(CoordinateCleaner)
library(sf)
library(stringr)
# read in host pathogen range csv
workd <- getwd()
worknew <- gsub('/Host_ENM_Pipeline', '', workd)
host_data <- read.csv(paste0(worknew, '/Wheat pathogen host range.csv'))
# get unique list of host species
host_list <- unique(host_data$Hosts)
two_names <- grep(' ', host_list)
host_list <- host_list[two_names]
remove_sp <- grep(' sp.', host_list, fixed = T)
host_list <- host_list[-remove_sp]
host_list <- unique(host_list)
